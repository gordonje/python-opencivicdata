# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-20 20:10
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import opencivicdata.models.base
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('opencivicdata', '0007_auto_20170312_0156'),
    ]

    operations = [
        migrations.CreateModel(
            name='BallotMeasureContestOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Text of the option, not necessarily as it appears on the ballot.', max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Candidacy',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('locked_fields', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('id', opencivicdata.models.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-candidacy/{{uuid}}``.', ocd_type='candidacy', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-candidacy/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-candidacy/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('candidate_name', models.CharField(help_text="For preserving the candidate's name as it was of the candidacy.", max_length=300)),
                ('filed_date', models.DateField(help_text='Specifies when the candidate filed for the contest.', null=True)),
                ('is_incumbent', models.NullBooleanField(help_text='Indicates whether the candidate is seeking re-election to a public office he/she currently holds')),
            ],
            options={
                'ordering': ('contest', 'post', 'person'),
                'verbose_name_plural': 'candidacies',
            },
        ),
        migrations.CreateModel(
            name='CandidacySource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('candidacy', models.ForeignKey(help_text='Reference to the assembed Candidacy.', on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='opencivicdata.Candidacy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CandidateContestPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(default=0, help_text='Useful for sorting for contests where two or more public offices are at stake, e.g., in a U.S. presidential contest, the President post would have a lower sort order than the Vice President post.')),
                ('post', models.ForeignKey(help_text='Reference to the Post at stake in the CandidateContest.', on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='opencivicdata.Post')),
            ],
            options={
                'ordering': ('contest', 'sort_order'),
            },
        ),
        migrations.CreateModel(
            name='ContestBase',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('locked_fields', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('id', opencivicdata.models.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-contest/{{uuid}}``.', ocd_type='contest', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-contest/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-contest/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('name', models.CharField(help_text='Name of the contest, not necessarily as it appears on the ballot.', max_length=300)),
            ],
            options={
                'ordering': ('election', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ContestIdentifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=300)),
                ('scheme', models.CharField(max_length=300)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContestSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='opencivicdata.Event')),
            ],
            options={
                'ordering': ('-start_time',),
                'abstract': False,
            },
            bases=('opencivicdata.event',),
        ),
        migrations.CreateModel(
            name='ElectionIdentifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=300)),
                ('scheme', models.CharField(max_length=300)),
                ('election', models.ForeignKey(help_text='Reference to the Election identified by the identifier.', on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='opencivicdata.Election')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('organization_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='opencivicdata.Organization')),
                ('abbreviation', models.CharField(help_text='An abbreviation for the party name.', max_length=3, unique=True)),
                ('color', models.CharField(blank=True, help_text='Six-character hex code representing an HTML color string. The pattern is ``[0-9a-f]{6}``.', max_length=6)),
                ('is_write_in', models.NullBooleanField(help_text='Indicates that the party is not officially recognized by a local, state, or federal organization but, rather, is a "write-in" in jurisdictions which allow candidates to free-form enter their political affiliation.')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'parties',
            },
            bases=('opencivicdata.organization',),
        ),
        migrations.CreateModel(
            name='PartyContestOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_incumbent', models.NullBooleanField(help_text='Indicates whether the party currently holds majority power.')),
                ('party', models.ForeignKey(help_text='Reference to the Party option in the PartyContest.', on_delete=django.db.models.deletion.CASCADE, to='opencivicdata.Party')),
            ],
            options={
                'ordering': ('contest', 'party'),
            },
        ),
        migrations.CreateModel(
            name='BallotMeasureContest',
            fields=[
                ('contestbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='opencivicdata.ContestBase')),
                ('description', models.TextField(help_text='Text describing the purpose and/or potential outcomes of the ballot measure, not necessarily as it appears on the ballot.')),
                ('requirement', models.CharField(blank=True, default='50% plus one vote', help_text='The threshold of votes the ballot measure needs in order to pass.', max_length=300)),
                ('classification', models.CharField(blank=True, help_text='Describes the origin and/or potential outcome of the ballot measure, e.g., "initiative statute", "legislative constitutional amendment".', max_length=300)),
            ],
            options={
                'abstract': False,
            },
            bases=('opencivicdata.contestbase',),
        ),
        migrations.CreateModel(
            name='CandidateContest',
            fields=[
                ('contestbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='opencivicdata.ContestBase')),
                ('previous_term_unexpired', models.BooleanField(default=False, help_text='Indicates the previous public office holder vacated the post before serving a full term.')),
                ('number_elected', models.IntegerField(default=1, help_text="Number of candidates that are elected in the contest, i.e. 'N' of N-of-M.")),
                ('party', models.ForeignKey(help_text='If the contest is among candidates of the same political party, e.g., a partisan primary election, reference to the Party.', null=True, on_delete=django.db.models.deletion.CASCADE, to='opencivicdata.Party')),
                ('runoff_for_contest', models.OneToOneField(help_text='If this contest is a runoff to determine the outcome of a previously undecided contest, reference to that CandidateContest.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runoff_contest', to='opencivicdata.CandidateContest')),
            ],
            options={
                'abstract': False,
            },
            bases=('opencivicdata.contestbase',),
        ),
        migrations.CreateModel(
            name='PartyContest',
            fields=[
                ('contestbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='opencivicdata.ContestBase')),
                ('runoff_for_contest', models.OneToOneField(help_text='If this contest is a runoff to determine the outcome of a previously undecided contest, reference to that PartyContest.', null=True, on_delete=django.db.models.deletion.CASCADE, to='opencivicdata.PartyContest')),
            ],
            options={
                'abstract': False,
            },
            bases=('opencivicdata.contestbase',),
        ),
        migrations.AddField(
            model_name='election',
            name='administrative_org',
            field=models.ForeignKey(help_text='Reference to the Organization that administers the election.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elections', to='opencivicdata.Organization'),
        ),
        migrations.AddField(
            model_name='election',
            name='division',
            field=models.ForeignKey(help_text='Reference to the Division that defines the broadest political geography of any contest to be decided by the election.', on_delete=django.db.models.deletion.CASCADE, related_name='elections', to='opencivicdata.Division'),
        ),
        migrations.AddField(
            model_name='contestsource',
            name='contest',
            field=models.ForeignKey(help_text='Reference to the assembed Contest.', on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='opencivicdata.ContestBase'),
        ),
        migrations.AddField(
            model_name='contestidentifier',
            name='contest',
            field=models.ForeignKey(help_text='Reference to the Contest identified by the identifier.', on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='opencivicdata.ContestBase'),
        ),
        migrations.AddField(
            model_name='contestbase',
            name='division',
            field=models.ForeignKey(help_text="Reference to the Division that defines the political geography of the contest, e.g., a specific Congressional or State Senate district. Should be a subdivision of the Division referenced by the contest's Election.", on_delete=django.db.models.deletion.CASCADE, related_name='divisions', to='opencivicdata.Division'),
        ),
        migrations.AddField(
            model_name='contestbase',
            name='election',
            field=models.ForeignKey(help_text='Reference to the Election in which the contest is decided.', on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='opencivicdata.Election'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='party',
            field=models.ForeignKey(help_text='Reference to and Party with which the candidate is affiliated.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidacies', to='opencivicdata.Party'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='person',
            field=models.ForeignKey(help_text='Reference to the Person who is the candidate.', on_delete=django.db.models.deletion.CASCADE, related_name='candidacies', to='opencivicdata.Person'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='post',
            field=models.ForeignKey(help_text='Reference to Post represents the public office for which the candidate is competing.', on_delete=django.db.models.deletion.CASCADE, related_name='candidacies', to='opencivicdata.Post'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='top_ticket_candidacy',
            field=models.ForeignKey(help_text='If the candidate is running as part of ticket, e.g., a Vice Presidential candidate running with a Presidential candidate, reference to candidacy at the top of the ticket.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ticket', to='opencivicdata.Candidacy'),
        ),
        migrations.CreateModel(
            name='RetentionContest',
            fields=[
                ('ballotmeasurecontest_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='opencivicdata.BallotMeasureContest')),
                ('membership', models.ForeignKey(help_text='Reference to the Membership that represents the tenure of a person in a specific public office.', on_delete=django.db.models.deletion.CASCADE, to='opencivicdata.Membership')),
            ],
            options={
                'abstract': False,
            },
            bases=('opencivicdata.ballotmeasurecontest',),
        ),
        migrations.AddField(
            model_name='partycontestoption',
            name='contest',
            field=models.ForeignKey(help_text='Reference to the PartyContest in which the Party is an option.', on_delete=django.db.models.deletion.CASCADE, related_name='parties', to='opencivicdata.PartyContest'),
        ),
        migrations.AddField(
            model_name='candidatecontestpost',
            name='contest',
            field=models.ForeignKey(help_text='Reference to the CandidateContest in which the Post is at stake.', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='opencivicdata.CandidateContest'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='contest',
            field=models.ForeignKey(help_text='Reference to an OCD CandidateContest representing the contest in which the candidate is competing.', on_delete=django.db.models.deletion.CASCADE, related_name='candidacies', to='opencivicdata.CandidateContest'),
        ),
        migrations.AddField(
            model_name='ballotmeasurecontestoption',
            name='contest',
            field=models.ForeignKey(help_text='Reference to the BallotMeasureContest.', on_delete=django.db.models.deletion.CASCADE, related_name='options', to='opencivicdata.BallotMeasureContest'),
        ),
        migrations.AddField(
            model_name='ballotmeasurecontest',
            name='runoff_for_contest',
            field=models.OneToOneField(help_text='If this contest is a runoff to determine the outcome of a previously undecided contest, reference to that BallotMeasureContest.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runoff_contest', to='opencivicdata.BallotMeasureContest'),
        ),
    ]
